{"version":3,"file":"static/js/154.04a11361.chunk.js","mappings":"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","sources":["redux/phonebook/contactsSlice/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-phonebook/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/PhonebookPage/PhonebookPage.module.css?4961","pages/PhonebookPage/PhonebookPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"addContact\":\"ContactForm_addContact__Q30Jz\"};","import { nanoid } from \"nanoid\";\nimport { selectContacts } from \"../../redux/phonebook/contactsSlice/selectors\";\nimport { addContact } from \"redux/phonebook/contactsSlice/operations\";\nimport { useSelector, useDispatch} from \"react-redux\";\nimport css from \"./ContactForm.module.css\";\n\nexport const ContactForm = () => {\n\n    const nameInputId = nanoid();\n    const numberInputId = nanoid();\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        const form = event.currentTarget;\n        const name = form.elements.name.value;\n        const number = form.elements.number.value;\n\n        if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n            alert(`${name} is already in contacts.`);\n            return;\n        } \n        dispatch(addContact({name, number}));\n        form.reset();\n        }\n\n    return (\n        <div className={css.contactForm}>\n            <form onSubmit={handleSubmit} className={css.form}>\n                <label \n                    htmlFor={nameInputId}\n                    className={css.label}>\n                    Name\n                </label>\n                <input \n                    id={nameInputId}\n                    className={css.input}\n                    name=\"name\"\n                    type=\"text\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                ></input>\n                <label \n                    htmlFor={numberInputId}\n                    className={css.label}>\n                    Number\n                </label>\n                <input\n                    id={numberInputId}\n                    className={css.input}\n                    type=\"tel\"\n                    name=\"number\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                ></input>\n                <button \n                    type=\"submit\"\n                    className={css.addContact}>Add contact</button>\n            </form>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import { nanoid } from \"nanoid\";\nimport { useDispatch } from \"react-redux\";\nimport { filterContact } from \"redux/phonebook/filterSlice\";\nimport css from \"./Filter.module.css\";\n\nexport const Filter = () => {\n    \n    const filterInputId = nanoid();\n    const dispatch = useDispatch();\n\n    const handleChangeFilter = event => {\n        dispatch(filterContact(event.target.value));\n    }\n\n    return (\n        <div className={css.filter}>\n            <label \n            htmlFor={filterInputId}\n            className={css.filterLabel}>\n            Find contacts by name\n            </label>\n                <input\n                    id={filterInputId}\n                    className={css.filterInput}\n                    type=\"search\"\n                    onChange={handleChangeFilter}>\n                </input>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","// extracted by mini-css-extract-plugin\nexport default {\"itemList\":\"ContactItem_itemList__ytour\",\"itemName\":\"ContactItem_itemName__19UjI\",\"itemPhone\":\"ContactItem_itemPhone__Ohcc6\",\"btnDelete\":\"ContactItem_btnDelete__edqzG\"};","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/phonebook/contactsSlice/operations\";\nimport css from \"./ContactItem.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst ContactItem = ({ contact }) => {\n    \n    const dispatch = useDispatch();\n    const handleDelete = id => {\n        dispatch(deleteContact(id));\n    }\n\n    return (\n        <li className={css.itemList}>\n            <p className={css.itemName}>{contact.name}</p>\n            <p className={css.itemPhone}>{contact.number}</p>\n                <button\n                className={css.btnDelete}\n                type=\"button\"\n                name=\"Delete\"\n                onClick={() => handleDelete(contact.id)}>Delete contact\n                </button>\n        </li>  \n    )\n} \n\nContactItem.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n    })\n}\n\nexport default ContactItem;","import css from \"./ContactList.module.css\";\nimport { useSelector } from \"react-redux\";\nimport { selectContacts } from \"../../redux/phonebook/contactsSlice/selectors\";\nimport { selectFilter } from \"redux/phonebook/filterSlice\";\nimport ContactItem from \"../ContactItem/ContactItem\";\n\nexport const ContactList = () => {\n\n    const contacts = useSelector(selectContacts);\n    const statusFilter = useSelector(selectFilter);\n    const filteredContactsBook = contacts.filter(contact => contact.name.toLowerCase().includes(statusFilter.status));\n    \n    return (\n        <div>\n            <ul className={css.contactList}>\n                {filteredContactsBook.map(contact => {\n                    return <ContactItem key={contact.id} contact={contact}/>\n                })}\n            </ul>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"phonebookPage\":\"PhonebookPage_phonebookPage__fx8w6\"};","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { fetchContacts } from \"redux/phonebook/contactsSlice/operations\";\nimport { selectContacts, selectIsLoading, selectError } from \"redux/phonebook/contactsSlice/selectors\";\nimport { Loader } from \"components/Loader/Loader\";\nimport css from \"./PhonebookPage.module.css\";\n\nexport default function PhonebookPage() {\n\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const contacts = useSelector(selectContacts);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <div className={css.phonebookPage}>\n            <ContactForm />\n            <Filter />\n            {isLoading && <Loader />}\n            {error && <p>Something went wrong...</p>}\n            {contacts.length > 0 && <ContactList />}\n        </div>\n    )\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","ContactForm","nameInputId","nanoid","numberInputId","useSelector","dispatch","useDispatch","className","css","onSubmit","event","preventDefault","form","currentTarget","name","elements","value","number","find","contact","toLowerCase","alert","addContact","reset","htmlFor","id","type","title","required","Filter","filterInputId","onChange","filterContact","target","onClick","deleteContact","ContactList","statusFilter","selectFilter","filteredContactsBook","filter","includes","status","map","PhonebookPage","useEffect","fetchContacts","Loader","length","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}