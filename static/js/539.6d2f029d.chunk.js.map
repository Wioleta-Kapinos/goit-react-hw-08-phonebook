{"version":3,"file":"static/js/539.6d2f029d.chunk.js","mappings":"wNACA,EAA4B,6BAA5B,EAAgE,wBAAhE,EAAgG,yBAAhG,EAAiI,yBAAjI,EAAqK,4B,SCIxJA,EAAY,WACrB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAcxB,OACI,gBAAKE,UAAWC,EAAhB,UACI,kBAAMD,UAAWC,EAAUC,SAdd,SAAAC,GACjBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cACnBX,GACIY,EAAAA,EAAAA,IAAM,CACFC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,SAGzCL,EAAKO,OACR,EAIO,WACG,kBACCC,QAAShB,EACTG,UAAWC,EAFZ,oBAKK,kBACAa,GAAIjB,EACJG,UAAWC,EACXc,KAAK,QACLC,KAAK,QACLC,UAAQ,KACZ,kBACIJ,QAASd,EACTC,UAAWC,EAFf,uBAKI,kBACAa,GAAIf,EACJC,UAAWC,EACXc,KAAK,WACLC,KAAK,WACLC,UAAQ,KACZ,mBAAQjB,UAAWC,EAAcc,KAAK,SAAtC,wBAIf,EClDD,EAAwB,yBCET,SAASG,IACpB,OACI,4BACI,eAAIlB,UAAWC,EAAf,oBACA,SAACP,EAAD,MAGX,C,uDCTM,IAkBII,EAAS,eAACqB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/LoginPage/LoginPage.module.css?f8e0","pages/LoginPage/LoginPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"LoginForm_loginForm__+koOR\",\"form\":\"LoginForm_form__gPEx5\",\"label\":\"LoginForm_label__F7sLE\",\"input\":\"LoginForm_input__aQRtt\",\"btnLogIn\":\"LoginForm_btnLogIn__Siu4Z\"};","import { useDispatch } from \"react-redux\";\nimport { logIn } from \"redux/auth/operations\";\nimport { nanoid } from \"nanoid\";\nimport css from \"./LoginForm.module.css\";\n\nexport const LoginForm = () => {\n    const dispatch = useDispatch();\n    const emailInputId = nanoid();\n    const passwordInputId = nanoid();\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        const form = event.currentTarget;\n        dispatch(\n            logIn({\n                email: form.elements.email.value,\n                password: form.elements.password.value,\n            })\n        );\n        form.reset();\n    }\n    \n    return (\n        <div className={css.loginForm}>\n            <form className={css.form} onSubmit={handleSubmit}>\n               <label\n                htmlFor={emailInputId} \n                className={css.label}>\n                    Email\n                </label>\n                    <input\n                    id={emailInputId}\n                    className={css.input} \n                    type=\"email\" \n                    name=\"email\" \n                    required />\n                <label\n                    htmlFor={passwordInputId}\n                    className={css.label}>\n                    Password\n                </label>\n                    <input\n                    id={passwordInputId} \n                    className={css.input}\n                    type=\"password\" \n                    name=\"password\" \n                    required />\n                <button className={css.btnLogIn} type=\"submit\">Log In</button>\n            </form>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"LoginPage_title__RBt-o\"};","import { LoginForm } from \"components/LoginForm/LoginForm\";\nimport css from \"./LoginPage.module.css\";\n\nexport default function LoginPage() {\n    return (\n        <div>\n            <h2 className={css.title}>Login</h2>\n            <LoginForm />\n        </div>\n    )\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["LoginForm","dispatch","useDispatch","emailInputId","nanoid","passwordInputId","className","css","onSubmit","event","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","htmlFor","id","type","name","required","LoginPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}