{"version":3,"file":"static/js/518.acabe526.chunk.js","mappings":"wNACA,EAA+B,mCAA/B,EAAyE,2BAAzE,EAA4G,4BAA5G,EAAgJ,4BAAhJ,EAA0L,kC,SCInL,SAASA,IACZ,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAkBC,EAAAA,EAAAA,MAClBC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAexB,OACI,gBAAKG,UAAWC,EAAhB,UACI,kBAAMD,UAAWC,EAAUC,SAfd,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfZ,GACEa,EAAAA,EAAAA,IAAS,CACPC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAIrCL,EAAKQ,OACN,EAGO,WACI,kBACIC,QAASlB,EACTI,UAAWC,EAFf,uBAKI,kBACIc,GAAInB,EACJI,UAAWC,EACXe,KAAK,OACLR,KAAK,OACLS,UAAQ,KAChB,kBACIH,QAAShB,EACTE,UAAWC,EAFf,oBAKI,kBACIc,GAAIjB,EACJE,UAAWC,EACXe,KAAK,QACLR,KAAK,QACLS,UAAQ,KAChB,kBACIH,QAASf,EACTC,UAAWC,EAFf,uBAKI,kBACIc,GAAIhB,EACJC,UAAWC,EACXe,KAAK,WACLR,KAAK,WACLS,UAAQ,KAChB,mBAAQjB,UAAWC,EAAiBe,KAAK,SAAzC,0BAIf,CC/DD,MAAwB,4BCET,SAASE,IACpB,OACI,4BACI,eAAIlB,UAAWC,EAAf,4BACA,SAACR,EAAD,MAGX,C,uDCTM,IAkBII,EAAS,eAACsB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACR,EAAIS,GAWvD,OARET,IAFFS,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/RegisterPage/RegisterPage.module.css?fdcb","pages/RegisterPage/RegisterPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"registerForm\":\"RegisterForm_registerForm__CXWAG\",\"form\":\"RegisterForm_form__Tv43W\",\"label\":\"RegisterForm_label__4pTXF\",\"input\":\"RegisterForm_input__FsgBz\",\"btnRegister\":\"RegisterForm_btnRegister__SwLLM\"};","import { useDispatch } from \"react-redux\";\nimport { register } from \"redux/auth/operations\";\nimport { nanoid } from \"nanoid\";\nimport css from \"./RegisterForm.module.css\";\n\nexport function RegisterForm() {\n    const dispatch = useDispatch();\n    const userNameInputId = nanoid();\n    const emailInputId = nanoid();\n    const passwordInputId = nanoid();\n  \n    const handleSubmit = e => {\n      e.preventDefault();\n      const form = e.currentTarget;\n      dispatch(\n        register({\n          name: form.elements.name.value,\n          email: form.elements.email.value,\n          password: form.elements.password.value,\n        })\n      );\n  \n      form.reset();\n    };\n    return (\n        <div className={css.registerForm}>\n            <form className={css.form} onSubmit={handleSubmit}>\n                <label\n                    htmlFor={userNameInputId}\n                    className={css.label}>\n                    Username\n                </label>\n                    <input\n                        id={userNameInputId} \n                        className={css.input}\n                        type=\"text\"\n                        name=\"name\"\n                        required />\n                <label \n                    htmlFor={emailInputId}\n                    className={css.label}>\n                    Email\n                </label>\n                    <input\n                        id={emailInputId}\n                        className={css.input} \n                        type=\"email\"\n                        name=\"email\"\n                        required />\n                <label\n                    htmlFor={passwordInputId} \n                    className={css.label}>\n                    Password\n                </label>\n                    <input\n                        id={passwordInputId}\n                        className={css.input}\n                        type=\"password\"\n                        name=\"password\"\n                        required />\n                <button className={css.btnRegister} type=\"submit\">Register</button>\n            </form>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"RegisterPage_title__Yjy6g\"};","import { RegisterForm } from \"components/RegisterForm/RegisterForm\";\nimport css from \"./RegisterPage.module.css\";\n\nexport default function RegisterPage() {\n    return (\n        <div>\n            <h2 className={css.title}>Register Form</h2>\n            <RegisterForm />\n        </div>\n    )\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["RegisterForm","dispatch","useDispatch","userNameInputId","nanoid","emailInputId","passwordInputId","className","css","onSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","htmlFor","id","type","required","RegisterPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}